//
//  ContentView.swift
//  CircularTimer
//
//  Created by Nicholas Grant on 2/15/20.
//  Copyright Â© 2020 nicholasgrant. All rights reserved.
//

import SwiftUI
import AVKit

struct ContentView: View {
    
    @State var pennyAnimationDown = false
    @State var smallpennyAnimationDown = false
    @State var pennyAnimationUp = false
    @State var smallpennyAnimationUp = false
    @State var nickelAnimationDown = false
    @State var smallnickelAnimationDown = false
    @State var nickelAnimationUp = false
    @State var smallnickelAnimationUp = false
    @State var dimeAnimationDown = false
    @State var dimeAnimationUp = false
    @State var smalldimeAnimationDown = false
    @State var smalldimeAnimationUp = false
    @State var quarterAnimationDown = false
    @State var quarterAnimationUp = false
    @State var smallquarterAnimationDown = false
    @State var smallquarterAnimationUp = false
    
    @State var totalSeconds: Double = 0
    
    @State var percentage: CGFloat = 100
    var body: some View {
        
        ZStack {
            Color.backgroundColor
                .edgesIgnoringSafeArea(.all)
            
            VStack {
                
                
                Image("dollar")
                    //                .fill(Color.green)
                    .resizable()
                    .frame(width: 360, height: 150)
                    .offset(x:0, y: -110)
                
                HStack {
                    HStack {
                        Image("penny")
                            .resizable()
                            .frame(width: 40, height: 40)
                            .offset(x:-60, y: -370)
                            .offset(x: 0, y:  smallpennyAnimationDown ? 190 : 0)
                            .offset(x: 0, y:
                                smallpennyAnimationUp ? -190 : 12.4)
                            .animation(Animation.easeInOut(duration: 1.0))
                            .onTapGesture {
                                self.smallpennyAnimationDown.toggle()
                                self.totalSeconds += 1
                        }
                    }
                    
                    HStack {
                        Image("nickel")
                            .resizable()
                            .frame(width: 42, height: 42)
                            .offset(x: -18, y: -370)
                            .offset(x: 0, y: smallnickelAnimationDown ? 190 : 0)
                            .offset(x: 0, y: smallnickelAnimationUp ? -190 : 12.4)
                            .animation(Animation.easeInOut(duration: 1.0))
                            .onTapGesture {
                                self.smallnickelAnimationDown.toggle()
                                self.totalSeconds = 5
                        }
                        .animation(Animation.easeInOut(duration: 1.0))
                        .onTapGesture {
                            self.smallnickelAnimationUp.toggle()
                            
                            
                        }
                    }
                    
                    
                    HStack {
                        Image("dime")
                            .resizable()
                            .frame(width: 40, height: 40)
                            .offset(x: 24, y: -370)
                            .offset(x: 0, y:  smalldimeAnimationDown ? 190 : 0)
                            .offset(x: 0, y:
                                smalldimeAnimationUp ? -190 : 12.4)
                            .animation(Animation.easeInOut(duration: 1.0))
                            .onTapGesture {
                                self.smalldimeAnimationDown.toggle()
                                self.totalSeconds += 10
                        }
                            
                        .animation(Animation.easeInOut(duration: 1.0))
                        .onTapGesture {
                            self.smalldimeAnimationUp.toggle()
                        }
                    }
                    HStack {
                        Image("quarter")
                            .resizable()
                            .frame(width: 42, height: 42)
                            .offset(x: 64, y: -370)
                            .offset(x: 0, y:  smallquarterAnimationDown ? 190 : 0)
                            .offset(x: 0, y:
                                smallquarterAnimationUp ? -190 : 12.4)
                            .animation(Animation.easeInOut(duration: 1.0))
                            .onTapGesture {
                                self.smallquarterAnimationDown.toggle()
                                self.totalSeconds += 25
                        }
                            
                        .animation(Animation.easeInOut(duration: 1.0))
                        .onTapGesture {
                            
                            self.smallquarterAnimationUp.toggle()
                            
                        }
                    }
                    
                }
            }
            
            
            
            VStack {
                
                
                
                
                HStack {
                    HStack {
                        Image("penny")
                            .resizable()
                            .frame(width: 70, height: 70)
                            .offset(x: -10, y: 10)
                            .offset(x: 0, y:  pennyAnimationDown ? 190 : 0)
                            .offset(x: 0, y:
                                pennyAnimationUp ? -190 : 12.4)
                            .animation(Animation.easeInOut(duration: 1.0))
                            .onTapGesture {
                                self.pennyAnimationDown.toggle()
                                self.totalSeconds += 60
                        }
                            
                            
                            
                        .animation(Animation.easeInOut(duration: 1.0))
                        .onTapGesture {
                            self.pennyAnimationUp.toggle()
                            
                            
                            //    print(self.totalSeconds);
                            
                        }
                    }
                    
                    HStack {
                        Image("nickel")
                            .resizable()
                            .frame(width: 80, height: 80)
                            .offset(x: -2, y: 10)
                            .offset(x: 0, y: nickelAnimationDown ? 190 : 0)
                            .offset(x: 0, y: nickelAnimationUp ? -190 : 12.4)
                            .animation(Animation.easeInOut(duration: 1.0))
                            .onTapGesture {
                                self.nickelAnimationDown.toggle()
                                self.totalSeconds = 300
                        }
                        .animation(Animation.easeInOut(duration: 1.0))
                        .onTapGesture {
                            self.nickelAnimationUp.toggle()
                            
                            
                        }
                    }
                    
                    HStack {
                        Image("dime")
                            .resizable()
                            .frame(width: 74, height: 74)
                            .offset(x: 4, y: 10)
                            .offset(x: 0, y:  dimeAnimationDown ? 190 : 0)
                            .offset(x: 0, y:
                                dimeAnimationUp ? -190 : 12.4)
                            .animation(Animation.easeInOut(duration: 1.0))
                            .onTapGesture {
                                self.dimeAnimationDown.toggle()
                                self.totalSeconds += 600
                        }
                            
                        .animation(Animation.easeInOut(duration: 1.0))
                        .onTapGesture {
                            self.dimeAnimationUp.toggle()
                        }
                    }
                    
                    HStack {
                        Image("quarter")
                            .resizable()
                            .frame(width: 74, height: 74)
                            .offset(x: 10, y: 10)
                            .offset(x: 0, y:  quarterAnimationDown ? 190 : 0)
                            .offset(x: 0, y:
                                quarterAnimationUp ? -190 : 12.4)
                            .animation(Animation.easeInOut(duration: 1.0))
                            .onTapGesture {
                                self.quarterAnimationDown.toggle()
                                self.totalSeconds += 1500
                        }
                            
                        .animation(Animation.easeInOut(duration: 1.0))
                        .onTapGesture {
                            
                            self.quarterAnimationUp.toggle()
                            
                        }
                    }
                }
                
                
                Spacer()
                ZStack {
                    //                  Pulsation()
                    Track()
                    Outline(totalSeconds: totalSeconds, percentage: percentage)
                    
                }
                Spacer()
                HStack {
                    
                HStack {
                    Button(action: {
                        
                        self.percentage = CGFloat(0)
                        
                        playSound(sound: "Money_Noise", type: "mp3")
                
                        
                        
                        
                    }) {
                        Image(systemName: "play").resizable()
                            .frame(width: 65, height: 65)
                            .aspectRatio(contentMode: .fit)
                            .foregroundColor(.purple)
                    }
                }
                
                HStack {
                    Button(action: {
                        
                        self.percentage = CGFloat(100)
                        
                        playSound(sound: "Money_Noise", type: "mp3")
                        
                        
                        
                    }) {
                        Image(systemName: "repeat").resizable()
                            .frame(width: 65, height: 65)
                            .aspectRatio(contentMode: .fit)
                            .foregroundColor(.purple)
                        
                    }
                }
                }
            }
        }
    }
}

struct Outline: View {
    var totalSeconds: Double
    var percentage: CGFloat = 100
    var colors: [Color] = [Color.outlineColor]
    var body: some View {
        ZStack {
            //            print("totalSeconds: " + totalSeconds);
            Circle()
                .fill(Color.clear)
                .frame(width: 250, height: 250)
                .offset(x: 0, y: 100)
                .overlay(
                    Circle()
                        .trim(from: 0, to: percentage * 0.01)
                        .stroke(style: StrokeStyle(lineWidth: 10, lineCap: .round, lineJoin: .round))
                        .fill(AngularGradient(gradient: .init(colors: colors), center: .center, startAngle: .zero, endAngle: .init(degrees: 360)))
                        .offset(x: 0, y: 135)
            ).animation(Animation.linear(duration: totalSeconds))
            Image("Money")
                .resizable()
                .frame(width: 230, height: 256)
                .offset(x: 0, y: 148)
        }
    }
}

struct Track: View {
    var colors: [Color] = [Color.trackColor]
    var body: some View {
        ZStack {
            Circle()
                .fill(Color.backgroundColor)
                .frame(width: 250, height: 250)
                .offset(x: 0, y: 135)
                .overlay(
                    Circle()
                        .stroke(style: StrokeStyle(lineWidth: 20))
                        .fill(AngularGradient(gradient: .init(colors: colors), center: .center))
                        .offset(x: 0, y: 135)
            )
            
            Circle()
                .fill(Color.backgroundColor)
                .frame(width: 250, height: 250)
                .offset(x: 0, y: 135)
                .overlay(
                    Circle()
                        .stroke(style: StrokeStyle(lineWidth: 20))
                        .fill(AngularGradient(gradient: .init(colors: colors), center: .center))
                        .offset(x: 0, y: 135)
            )
            
            
        }
    }
}

struct ContentView_Previews: PreviewProvider {
    static var previews: some View {
        ContentView()
    }
}
